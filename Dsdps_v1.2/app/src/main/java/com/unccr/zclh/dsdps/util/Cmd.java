package com.unccr.zclh.dsdps.util;import android.os.SystemClock;import android.util.Log;import java.io.BufferedWriter;import java.io.ByteArrayOutputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStream;public class Cmd {    private static final String TAG = "Cmd";    public interface CmdResultCallback {        /**         * 执行 linux 命令回执         *         * @param result      执行命令后返回的消息         * @param timeConsume 执行命令消耗的时间（单位：毫秒）         */        void callback(String result, long timeConsume);    }    public static void rootCmd(final String cmd, final CmdResultCallback callback) {        new Thread() {            public void run() {                long l1 = SystemClock.uptimeMillis();                Process process = null;                DataOutputStream os = null;                // 命令执行结果                InputStream is = null;                DataInputStream dis = null;                StringBuilder sb = new StringBuilder();                try {                    process = Runtime.getRuntime().exec("su");                    Log.d(TAG, "rootCmd su");                    os = new DataOutputStream(process.getOutputStream());                    os.writeBytes(cmd + "\n");                    Log.d(TAG, "rootCmd cmd: " + cmd);                    os.writeBytes("exit\n");                    Log.d(TAG, "rootCmd exit");                    os.flush();                    process.waitFor();                    Log.d(TAG, "rootCmd exec done!");                    // flag = true;                } catch (Exception e) {                    // flag = false;                    Log.e(TAG, "rootCmd", e);                } finally {                    try {                        if (is != null) {                            is.close();                        }                        if (dis != null) {                            dis.close();                        }                        if (os != null) {                            os.close();                        }                        process.destroy();                    } catch (Exception e) {                        // flag = false;                        Log.e(TAG, "rootCmd", e);                    }                }                long l2 = SystemClock.uptimeMillis();                if (callback != null) {                    callback.callback(sb.toString(), l2 - l1);                }            }        }.start();    }    /**     * 执行带参数和返回值的命令     *     * @param args 命令执行需要的参数，包括命令本身     */    public static void cmd(final String[] args, final CmdResultCallback callback) {        new Thread() {            @Override            public void run() {                long l1 = SystemClock.uptimeMillis();                String result = "";                ProcessBuilder processBuilder = new ProcessBuilder(args);                Process process = null;                InputStream errIs = null;                InputStream inIs = null;                try {                    ByteArrayOutputStream baos = new ByteArrayOutputStream();                    int read = -1;                    process = processBuilder.start();                    errIs = process.getErrorStream();                    while ((read = errIs.read()) != -1) {                        baos.write(read);                    }                    baos.write("\n".getBytes());                    inIs = process.getInputStream();                    while ((read = inIs.read()) != -1) {                        baos.write(read);                    }                    byte[] data = baos.toByteArray();                    result = new String(data);                    Log.d(TAG, "intall result: " + result);                } catch (IOException e) {                    Log.e(TAG, "cmd", e);                } catch (Exception e) {                    Log.e(TAG, "cmd", e);                } finally {                    try {                        if (errIs != null) {                            errIs.close();                        }                        if (inIs != null) {                            inIs.close();                        }                    } catch (IOException e) {                        Log.e(TAG, "cmd", e);                    }                    if (process != null) {                        process.destroy();                    }                }                long l2 = SystemClock.uptimeMillis();                if (callback != null) {                    callback.callback(result, l2 - l1);                }            }        }.start();    }    /**     * 打开看门狗，写入命令     *     * @param path     * @param command     */    public static void openWatchDog(String path, String command) {        try {            Log.d(TAG, "openWatchDog path: " + path + "\r" + " command: " + command);            File writeName = new File(path);            BufferedWriter out = new BufferedWriter(new FileWriter(writeName));            out.write(command);            out.flush();            out.close();        } catch (Exception e) {            Log.d(TAG, "openWatchDog 写入命令失败 : " + command);            Log.d(TAG, "openWatchDog 写入命令b失败 : " + e.toString());        }    }}